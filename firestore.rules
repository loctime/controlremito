rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {
    
    // ===== FUNCIONES AUXILIARES =====
    function isAuthenticated() {
      return request.auth != null;
    }
    
    function userDocExists() {
      return exists(/databases/$(database)/documents/apps/controld/users/$(request.auth.uid));
    }
    
    function getUserData() {
      return get(/databases/$(database)/documents/apps/controld/users/$(request.auth.uid)).data;
    }
    
    function isMaxDev() {
      return isAuthenticated() && userDocExists() && getUserData().role == 'maxdev';
    }
    
    function isAdmin() {
      return isAuthenticated() && userDocExists() && (getUserData().role == 'admin' || getUserData().role == 'maxdev');
    }
    
    function isBranch() {
      return isAuthenticated() && userDocExists() && getUserData().role == 'branch';
    }
    
    function isFactory() {
      return isAuthenticated() && userDocExists() && getUserData().role == 'factory';
    }
    
    function isDelivery() {
      return isAuthenticated() && userDocExists() && getUserData().role == 'delivery';
    }
    
    // ===== REGLAS PARA CONTROLDAT (RED SOCIAL) =====
    
    match /apps/controlDat {
      // Usuarios - todos autenticados pueden leer
      match /users/{userId} {
        allow read: if isAuthenticated();
        allow create: if isAuthenticated() && request.auth.uid == userId;
        allow update: if isAuthenticated() && request.auth.uid == userId;
        allow delete: if isAuthenticated() && request.auth.uid == userId;
      }
      
      // Posts - todos autenticados pueden leer, cualquier usuario puede crear
      match /posts/{postId} {
        allow read: if isAuthenticated();
        allow create: if isAuthenticated();
        allow update: if isAuthenticated() && request.auth.uid == resource.data.userId;
        allow delete: if isAuthenticated() && request.auth.uid == resource.data.userId;
      }
      
      // Comentarios - todos autenticados pueden leer, cualquier usuario puede crear
      match /comments/{commentId} {
        allow read: if isAuthenticated();
        allow create: if isAuthenticated();
        allow update: if isAuthenticated() && request.auth.uid == resource.data.userId;
        allow delete: if isAuthenticated() && request.auth.uid == resource.data.userId;
      }
      
      // Notificaciones - solo el propietario puede leer y escribir
      match /notifications/{notificationId} {
        allow read: if isAuthenticated() && request.auth.uid == resource.data.userId;
        allow create: if isAuthenticated();
        allow update: if isAuthenticated() && request.auth.uid == resource.data.userId;
        allow delete: if isAuthenticated() && request.auth.uid == resource.data.userId;
      }
    }
    
    // ===== REGLAS PARA REMITOS (CONTROLD) =====
    
    match /apps/controld {
      // Usuarios - todos autenticados pueden leer, crear su propio documento, admin/maxdev pueden modificar todos
      match /users/{userId} {
        // Permitir lectura a todos los autenticados (sin validar si existe su documento)
        allow read: if isAuthenticated();
        
        // Permitir crear su propio documento de usuario (auto-registro) O si es admin/maxdev
        allow create: if isAuthenticated() && (
          request.auth.uid == userId ||
          (userDocExists() && (getUserData().role == 'admin' || getUserData().role == 'maxdev'))
        );
        
        // Permitir actualizar su propio perfil o si es admin/maxdev
        allow update: if isAuthenticated() && (
          request.auth.uid == userId || 
          (userDocExists() && (getUserData().role == 'admin' || getUserData().role == 'maxdev'))
        );
        
        // Solo admin/maxdev pueden eliminar usuarios
        allow delete: if userDocExists() && (getUserData().role == 'admin' || getUserData().role == 'maxdev');
      }
      
      // Sucursales/F치bricas - todos autenticados pueden leer, admin/maxdev pueden escribir
      match /branches/{branchId} {
        allow read: if isAuthenticated();
        allow write: if isMaxDev() || isAdmin();
      }
      
      // Productos - todos autenticados pueden leer, admin/maxdev/factory pueden crear
      match /products/{productId} {
        allow read: if isAuthenticated();
        allow create: if isMaxDev() || isAdmin() || isFactory();
        allow update, delete: if isMaxDev() || isAdmin();
      }
      
      // Pedidos - versi칩n temporal simplificada
      match /orders/{orderId} {
        allow read: if isAuthenticated();
        allow create: if isBranch() || isFactory() || isMaxDev() || isAdmin();
        allow update: if isAuthenticated(); // Temporal - muy permisivo
        allow delete: if isMaxDev() || isAdmin();
      }
      
      // Remitos de entrega
      match /deliveryNotes/{noteId} {
        allow read: if isAuthenticated();
        // Permitir crear: branch (quien recibe), delivery, admin, maxdev
        allow create: if isBranch() || isDelivery() || isMaxDev() || isAdmin();
        allow update: if isDelivery() || isMaxDev() || isAdmin();
        allow delete: if isMaxDev() || isAdmin();
      }
      
      // Plantillas - con soporte para plantillas personales
      match /templates/{templateId} {
        // Leer: todos pueden ver plantillas globales/branch, solo el creador puede ver sus plantillas personales
        allow read: if isAuthenticated() && (
          !exists(/databases/$(database)/documents/apps/controld/templates/$(templateId)) ||
          resource.data.type != 'personal' ||
          resource.data.createdBy == request.auth.uid ||
          isMaxDev() ||
          isAdmin()
        );
        
        // Crear: branch/factory pueden crear plantillas personales, admin/maxdev pueden crear cualquier tipo
        allow create: if isAuthenticated() && (
          // Plantillas personales: cualquier usuario autenticado
          (request.resource.data.type == 'personal' && 
           request.resource.data.createdBy == request.auth.uid &&
           request.resource.data.active == true) ||
          // Plantillas globales/branch: solo admin/maxdev
          (isAdmin() || isMaxDev())
        );
        
        // Actualizar: solo el creador puede actualizar sus plantillas personales, admin/maxdev pueden actualizar cualquiera
        allow update: if isAuthenticated() && (
          (resource.data.type == 'personal' && resource.data.createdBy == request.auth.uid) ||
          isMaxDev() ||
          isAdmin()
        );
        
        // Eliminar: solo el creador puede eliminar sus plantillas personales, admin/maxdev pueden eliminar cualquiera
        allow delete: if isAuthenticated() && (
          (resource.data.type == 'personal' && resource.data.createdBy == request.auth.uid) ||
          isMaxDev() ||
          isAdmin()
        );
      }
      
      // Metadata de remitos (historial de estados y firmas)
      match /remit-metadata/{metadataId} {
        allow read: if isAuthenticated();
        // Permitir crear: branch, factory, admin, maxdev
        allow create: if isBranch() || isFactory() || isMaxDev() || isAdmin();
        // Permitir actualizar: branch (recepci칩n), factory (armado), delivery (entrega), admin, maxdev
        allow update: if isBranch() || isFactory() || isDelivery() || isMaxDev() || isAdmin();
        allow delete: if isMaxDev() || isAdmin();
      }
      
      // ===== NUEVAS REGLAS PARA SISTEMA DE REPOSICIONES =====
      
      // Colas de reposici칩n - branch puede crear/leer su propia cola, factory/admin/maxdev pueden leer todas
      match /replacementQueues/{queueId} {
        allow read: if isAuthenticated() && (
          isBranch() || isFactory() || isMaxDev() || isAdmin()
        );
        allow create: if isBranch() || isMaxDev() || isAdmin();
        allow update: if isBranch() || isFactory() || isMaxDev() || isAdmin();
        allow delete: if isMaxDev() || isAdmin();
      }
    }
    
    // ===== REGLAS PARA CONTROLGASTOS =====
    
    // Gastos del usuario - nueva estructura organizada
    match /apps/controlgastos/users/{userId}/expenses/{expenseId} {
      allow read, write: if request.auth != null && request.auth.uid == userId;
      allow create: if request.auth != null && request.auth.uid == userId;
      allow update, delete: if request.auth != null && request.auth.uid == userId;
    }
    
    // Pagos del usuario (historial)
    match /apps/controlgastos/users/{userId}/payments/{paymentId} {
      allow read, write: if request.auth != null && request.auth.uid == userId;
      allow create: if request.auth != null && request.auth.uid == userId;
      allow update, delete: if request.auth != null && request.auth.uid == userId;
    }
    
    // Comprobantes del usuario
    match /apps/controlgastos/users/{userId}/receipts/{receiptId} {
      allow read, write: if request.auth != null && request.auth.uid == userId;
      allow create: if request.auth != null && request.auth.uid == userId;
      allow update, delete: if request.auth != null && request.auth.uid == userId;
    }
    
    // Items recurrentes del usuario (plantillas)
    match /apps/controlgastos/users/{userId}/recurring_items/{itemId} {
      allow read: if request.auth != null && request.auth.uid == userId;
      allow create: if request.auth != null 
                    && request.auth.uid == userId
                    && request.resource.data.userId == userId;
      allow update: if request.auth != null 
                    && request.auth.uid == userId
                    && resource.data.userId == userId;
      allow delete: if request.auth != null 
                    && request.auth.uid == userId
                    && resource.data.userId == userId;
    }
    
    // Instancias de items recurrentes del usuario
    match /apps/controlgastos/users/{userId}/recurring_items_instances/{instanceId} {
      allow read: if request.auth != null && request.auth.uid == userId;
      allow create: if request.auth != null 
                    && request.auth.uid == userId
                    && request.resource.data.userId == userId;
      allow update: if request.auth != null 
                    && request.auth.uid == userId
                    && resource.data.userId == userId;
      allow delete: if request.auth != null 
                    && request.auth.uid == userId
                    && resource.data.userId == userId;
    }
    
    // Configuraciones del usuario
    match /apps/controlgastos/users/{userId}/settings/{settingId} {
      allow read, write: if request.auth != null && request.auth.uid == userId;
      allow create: if request.auth != null && request.auth.uid == userId;
      allow update, delete: if request.auth != null && request.auth.uid == userId;
    }
    
    // Colecciones globales de ControlGastos
    match /apps/controlgastos/categories/{categoryId} {
      allow read: if request.auth != null;
      allow write: if request.auth != null;
    }
    
    // Reglas legacy para ControlGastos (temporal)
    match /expenses/{expenseId} {
      allow read, write: if request.auth != null && request.auth.uid == resource.data.userId;
      allow create: if request.auth != null && request.auth.uid == request.resource.data.userId;
      allow update, delete: if request.auth != null && request.auth.uid == resource.data.userId;
    }
    
    match /payments/{paymentId} {
      allow read, write: if request.auth != null && request.auth.uid == resource.data.userId;
      allow create: if request.auth != null && request.auth.uid == request.resource.data.userId;
      allow update, delete: if request.auth != null && request.auth.uid == resource.data.userId;
    }
    
    match /invoices/{invoiceId} {
      allow read, write: if request.auth != null && request.auth.uid == resource.data.userId;
      allow create: if request.auth != null && request.auth.uid == request.resource.data.userId;
      allow update, delete: if request.auth != null && request.auth.uid == resource.data.userId;
    }
    
    // ===== REGLAS PARA CONTROLFILE =====
    
    // Files - solo el propietario puede acceder
    match /files/{fileId} {
      allow read, write: if request.auth != null && request.auth.uid == resource.data.userId;
      allow create: if request.auth != null && request.auth.uid == request.resource.data.userId;
    }
    
    // Folders - solo el propietario puede acceder
    match /folders/{folderId} {
      allow read, write: if request.auth != null && request.auth.uid == resource.data.userId;
      allow create: if request.auth != null && request.auth.uid == request.resource.data.userId;
    }
    
    // Upload sessions - solo el propietario puede acceder
    match /uploadSessions/{sessionId} {
      allow read, write: if request.auth != null && request.auth.uid == resource.data.uid;
      allow create: if request.auth != null && request.auth.uid == request.resource.data.uid;
    }
    
    // Shares - lectura p칰blica si es p칰blico, escritura solo para el propietario
    match /shares/{shareId} {
      allow read: if resource.data.isPublic == true || 
                     (request.auth != null && request.auth.uid == resource.data.userId);
      allow write: if request.auth != null && request.auth.uid == resource.data.userId;
      allow create: if request.auth != null && request.auth.uid == request.resource.data.userId;
    }
    
    // ===== REGLAS PARA CONTROLCICLO =====
    
    // Datos del usuario de ControlCiclo - solo el propietario puede acceder
    match /apps/controlciclo/users/{userId}/{document=**} {
      allow read, write: if request.auth != null && request.auth.uid == userId;
      allow create: if request.auth != null && request.auth.uid == userId;
      allow update, delete: if request.auth != null && request.auth.uid == userId;
    }
    
    // Denegar acceso a cualquier otra colecci칩n por defecto
    match /{document=**} {
      allow read, write: if false;
    }
  }
}
